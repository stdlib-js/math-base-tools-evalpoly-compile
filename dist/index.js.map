{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar readFile = require( '@stdlib/fs-read-file' ).sync;\nvar replace = require( '@stdlib/string-replace' );\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\n\n\n// VARIABLES //\n\nvar opts = {\n\t'encoding': 'utf8'\n};\nvar dir = join( __dirname, 'templates' );\n\n// Templates:\nvar SINGLE_COEFFICIENT_TEMPLATE = readFile( join( dir, 'single_coefficient.js.txt' ), opts ); // eslint-disable-line id-length\nvar EVALPOLY_TEMPLATE = readFile( join( dir, 'evalpoly.js.txt' ), opts );\nvar EMPTY_TEMPLATE = readFile( join( dir, 'empty.js.txt' ), opts );\nvar LOOP_TEMPLATE = readFile( join( dir, 'loop.js.txt' ), opts );\nvar MAX_CHARS = 68; // max-len (80) - chars already in line ('tab': 4, 'return ': 7, ';': 1)\n\n\n// MAIN //\n\n/**\n* Compiles a module string which exports a function for evaluating a polynomial.\n*\n* @param {NumericArray} c - polynomial coefficients sorted in ascending degree\n* @returns {string} module string exporting a function for evaluating a polynomial\n*\n* @example\n* var str = compile( [ 3.0, 2.0, 1.0 ] );\n* // returns <string>\n*/\nfunction compile( c ) {\n\tvar horner;\n\tvar str;\n\tvar n;\n\tvar m;\n\tvar i;\n\n\tn = c.length;\n\n\t// If no coefficients, the function always returns 0...\n\tif ( n === 0 ) {\n\t\treturn EMPTY_TEMPLATE;\n\t}\n\t// If only one coefficient, the function always returns that coefficient...\n\tif ( n === 1 ) {\n\t\tstr = c[ 0 ].toString();\n\t\tif ( isInteger( c[ 0 ] ) ) {\n\t\t\tstr += '.0';\n\t\t}\n\t\treturn replace( SINGLE_COEFFICIENT_TEMPLATE, '{{coefficient}}', str );\n\t}\n\tm = n - 1;\n\n\t// Avoid exceeding the maximum stack size on V8 by using a simple loop :(. Note that the choice of `500` was empirically determined...\n\tif ( n > 500 ) {\n\t\tstr = '';\n\t\tfor ( i = 0; i < n; i++ ) {\n\t\t\tstr += '\\t' + c[ i ].toString();\n\t\t\tif ( isInteger( c[ i ] ) ) {\n\t\t\t\tstr += '.0';\n\t\t\t}\n\t\t\tif ( i < m ) {\n\t\t\t\tstr += ',\\n';\n\t\t\t}\n\t\t}\n\t\treturn replace( LOOP_TEMPLATE, '{{coefficients}}', str );\n\t}\n\t// If more than one coefficient, apply Horner's method...\n\thorner = c[ 0 ].toString();\n\tif ( isInteger( c[ 0 ] ) ) {\n\t\thorner += '.0';\n\t}\n\tfor ( i = 1; i < n; i++ ) {\n\t\thorner += ' + (x * ';\n\t\tif ( i < m ) {\n\t\t\thorner += '(';\n\t\t}\n\t\thorner += c[ i ].toString();\n\t\tif ( isInteger( c[ i ] ) ) {\n\t\t\thorner += '.0';\n\t\t}\n\t}\n\t// Close all the parentheses...\n\tfor ( i = 0; i < (2*(n-1))-1; i++ ) {\n\t\thorner += ')';\n\t}\n\tstr = c[ 0 ].toString();\n\tif ( isInteger( c[ 0 ] ) ) {\n\t\tstr += '.0';\n\t}\n\tstr = replace( EVALPOLY_TEMPLATE, '{{coefficient}}', str );\n\tstr = replace( str, '{{horner}}', horner );\n\treturn replace( str, '{{eslint}}', ( horner.length > MAX_CHARS ) ? ' // eslint-disable-line max-len' : '' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = compile;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compile a module for evaluating a polynomial.\n*\n* @module @stdlib/math-base-tools-evalpoly-compile\n*\n* @example\n* var compile = require( '@stdlib/math-base-tools-evalpoly-compile' );\n*\n* var str = compile( [3.0,2.0,1.0] ); // 3*10^0 + 2*10^1 + 1*10^2\n* // returns <string>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAW,QAAS,sBAAuB,EAAE,KAC7CC,EAAU,QAAS,wBAAyB,EAC5CC,EAAY,QAAS,2BAA4B,EAAE,YAKnDC,EAAO,CACV,SAAY,MACb,EACIC,EAAML,EAAM,UAAW,WAAY,EAGnCM,EAA8BL,EAAUD,EAAMK,EAAK,2BAA4B,EAAGD,CAAK,EACvFG,EAAoBN,EAAUD,EAAMK,EAAK,iBAAkB,EAAGD,CAAK,EACnEI,EAAiBP,EAAUD,EAAMK,EAAK,cAAe,EAAGD,CAAK,EAC7DK,EAAgBR,EAAUD,EAAMK,EAAK,aAAc,EAAGD,CAAK,EAC3DM,EAAY,GAehB,SAASC,EAASC,EAAI,CACrB,IAAIC,EACAC,EACA,EACAC,EACAC,EAKJ,GAHA,EAAIJ,EAAE,OAGD,IAAM,EACV,OAAOJ,EAGR,GAAK,IAAM,EACV,OAAAM,EAAMF,EAAG,CAAE,EAAE,SAAS,EACjBT,EAAWS,EAAG,CAAE,CAAE,IACtBE,GAAO,MAEDZ,EAASI,EAA6B,kBAAmBQ,CAAI,EAKrE,GAHAC,EAAI,EAAI,EAGH,EAAI,IAAM,CAEd,IADAD,EAAM,GACAE,EAAI,EAAGA,EAAI,EAAGA,IACnBF,GAAO,IAAOF,EAAGI,CAAE,EAAE,SAAS,EACzBb,EAAWS,EAAGI,CAAE,CAAE,IACtBF,GAAO,MAEHE,EAAID,IACRD,GAAO,OAGT,OAAOZ,EAASO,EAAe,mBAAoBK,CAAI,CACxD,CAMA,IAJAD,EAASD,EAAG,CAAE,EAAE,SAAS,EACpBT,EAAWS,EAAG,CAAE,CAAE,IACtBC,GAAU,MAELG,EAAI,EAAGA,EAAI,EAAGA,IACnBH,GAAU,WACLG,EAAID,IACRF,GAAU,KAEXA,GAAUD,EAAGI,CAAE,EAAE,SAAS,EACrBb,EAAWS,EAAGI,CAAE,CAAE,IACtBH,GAAU,MAIZ,IAAMG,EAAI,EAAGA,EAAK,GAAG,EAAE,GAAI,EAAGA,IAC7BH,GAAU,IAEX,OAAAC,EAAMF,EAAG,CAAE,EAAE,SAAS,EACjBT,EAAWS,EAAG,CAAE,CAAE,IACtBE,GAAO,MAERA,EAAMZ,EAASK,EAAmB,kBAAmBO,CAAI,EACzDA,EAAMZ,EAASY,EAAK,aAAcD,CAAO,EAClCX,EAASY,EAAK,aAAgBD,EAAO,OAASH,EAAc,kCAAoC,EAAG,CAC3G,CAKAX,EAAO,QAAUY,ICzFjB,IAAIM,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "join", "readFile", "replace", "isInteger", "opts", "dir", "SINGLE_COEFFICIENT_TEMPLATE", "EVALPOLY_TEMPLATE", "EMPTY_TEMPLATE", "LOOP_TEMPLATE", "MAX_CHARS", "compile", "c", "horner", "str", "m", "i", "main"]
}
