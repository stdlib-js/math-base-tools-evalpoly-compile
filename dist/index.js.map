{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar readFile = require( '@stdlib/fs-read-file' ).sync;\nvar replace = require( '@stdlib/string-replace' );\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar Float32Array = require( '@stdlib/array-float32' );\n\n\n// VARIABLES //\n\nvar opts = {\n\t'encoding': 'utf8'\n};\nvar dir = join( __dirname, 'templates' );\n\n// Templates:\nvar SINGLE_COEFFICIENT_TEMPLATE = readFile( join( dir, 'single_coefficient.js.txt' ), opts ); // eslint-disable-line id-length\n\nvar EVALPOLY_TEMPLATE = readFile( join( dir, 'evalpoly.js.txt' ), opts );\nvar EVALPOLY_FLOAT32_TEMPLATE = readFile( join( dir, 'evalpoly.float32.js.txt' ), opts );\n\nvar EMPTY_TEMPLATE = readFile( join( dir, 'empty.js.txt' ), opts );\n\nvar LOOP_TEMPLATE = readFile( join( dir, 'loop.js.txt' ), opts );\nvar LOOP_FLOAT32_TEMPLATE = readFile( join( dir, 'loop.float32.js.txt' ), opts );\n\nvar MAX_CHARS = 68; // max-len (80) - chars already in line ('tab': 4, 'return ': 7, ';': 1)\n\n\n// MAIN //\n\n/**\n* Compiles a module string which exports a function for evaluating a polynomial.\n*\n* @param {NumericArray} c - polynomial coefficients sorted in ascending degree\n* @param {Options} [options] - function options\n* @param {string} [options.dtype='float64'] - input value floating-point data type\n* @returns {string} module string exporting a function for evaluating a polynomial\n*\n* @example\n* var str = compile( [ 3.0, 2.0, 1.0 ] );\n* // returns <string>\n*/\nfunction compile( c, options ) {\n\tvar horner;\n\tvar opts;\n\tvar tmpl;\n\tvar str;\n\tvar n;\n\tvar m;\n\tvar i;\n\n\topts = {\n\t\t'dtype': 'float64'\n\t};\n\tif ( arguments.length > 1 ) {\n\t\topts.dtype = options.dtype || opts.dtype;\n\t}\n\tn = c.length;\n\n\t// If no coefficients, the function always returns 0...\n\tif ( n === 0 ) {\n\t\treturn EMPTY_TEMPLATE;\n\t}\n\tif ( opts.dtype === 'float32' ) {\n\t\t// Ensure that coefficients have been converted to single-precision:\n\t\tc = new Float32Array( c );\n\t}\n\t// If only one coefficient, the function always returns that coefficient...\n\tif ( n === 1 ) {\n\t\tstr = c[ 0 ].toString();\n\t\tif ( isInteger( c[ 0 ] ) ) {\n\t\t\tstr += '.0';\n\t\t}\n\t\treturn replace( SINGLE_COEFFICIENT_TEMPLATE, '{{coefficient}}', str );\n\t}\n\tm = n - 1;\n\n\t// Avoid exceeding the maximum stack size on V8 by using a simple loop :(. Note that the choice of `500` was empirically determined...\n\tif ( n > 500 ) {\n\t\tstr = '';\n\t\tfor ( i = 0; i < n; i++ ) {\n\t\t\tstr += '\\t' + c[ i ].toString();\n\t\t\tif ( isInteger( c[ i ] ) ) {\n\t\t\t\tstr += '.0';\n\t\t\t}\n\t\t\tif ( i < m ) {\n\t\t\t\tstr += ',\\n';\n\t\t\t}\n\t\t}\n\t\tif ( opts.dtype === 'float32' ) {\n\t\t\ttmpl = LOOP_FLOAT32_TEMPLATE;\n\t\t} else {\n\t\t\ttmpl = LOOP_TEMPLATE;\n\t\t}\n\t\treturn replace( tmpl, '{{coefficients}}', str );\n\t}\n\t// If more than one coefficient, apply Horner's method...\n\tif ( opts.dtype === 'float32' ) {\n\t\thorner = 'float64ToFloat32(';\n\t} else {\n\t\thorner = '';\n\t}\n\thorner += c[ 0 ].toString();\n\tif ( isInteger( c[ 0 ] ) ) {\n\t\thorner += '.0';\n\t}\n\tfor ( i = 1; i < n; i++ ) {\n\t\tif ( opts.dtype === 'float32' ) {\n\t\t\thorner += ' + float64ToFloat32(x * ';\n\t\t\tif ( i < m ) {\n\t\t\t\thorner += 'float64ToFloat32(';\n\t\t\t}\n\t\t} else {\n\t\t\thorner += ' + (x * ';\n\t\t\tif ( i < m ) {\n\t\t\t\thorner += '(';\n\t\t\t}\n\t\t}\n\t\thorner += c[ i ].toString();\n\t\tif ( isInteger( c[ i ] ) ) {\n\t\t\thorner += '.0';\n\t\t}\n\t}\n\t// Close all the parentheses...\n\tfor ( i = 0; i < (2*(n-1))-1; i++ ) {\n\t\thorner += ')';\n\t}\n\tif ( opts.dtype === 'float32' ) {\n\t\thorner += ')';\n\t}\n\tstr = c[ 0 ].toString();\n\tif ( isInteger( c[ 0 ] ) ) {\n\t\tstr += '.0';\n\t}\n\tif ( opts.dtype === 'float32' ) {\n\t\ttmpl = EVALPOLY_FLOAT32_TEMPLATE;\n\t} else {\n\t\ttmpl = EVALPOLY_TEMPLATE;\n\t}\n\tstr = replace( tmpl, '{{coefficient}}', str );\n\tstr = replace( str, '{{horner}}', horner );\n\treturn replace( str, '{{eslint}}', ( horner.length > MAX_CHARS ) ? ' // eslint-disable-line max-len' : '' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = compile;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compile a module for evaluating a polynomial.\n*\n* @module @stdlib/math-base-tools-evalpoly-compile\n*\n* @example\n* var compile = require( '@stdlib/math-base-tools-evalpoly-compile' );\n*\n* var str = compile( [3.0,2.0,1.0] ); // 3*10^0 + 2*10^1 + 1*10^2\n* // returns <string>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAW,QAAS,sBAAuB,EAAE,KAC7CC,EAAU,QAAS,wBAAyB,EAC5CC,EAAY,QAAS,2BAA4B,EAAE,YACnDC,EAAe,QAAS,uBAAwB,EAKhDC,EAAO,CACV,SAAY,MACb,EACIC,EAAMN,EAAM,UAAW,WAAY,EAGnCO,EAA8BN,EAAUD,EAAMM,EAAK,2BAA4B,EAAGD,CAAK,EAEvFG,EAAoBP,EAAUD,EAAMM,EAAK,iBAAkB,EAAGD,CAAK,EACnEI,EAA4BR,EAAUD,EAAMM,EAAK,yBAA0B,EAAGD,CAAK,EAEnFK,EAAiBT,EAAUD,EAAMM,EAAK,cAAe,EAAGD,CAAK,EAE7DM,EAAgBV,EAAUD,EAAMM,EAAK,aAAc,EAAGD,CAAK,EAC3DO,EAAwBX,EAAUD,EAAMM,EAAK,qBAAsB,EAAGD,CAAK,EAE3EQ,EAAY,GAiBhB,SAASC,EAASC,EAAGC,EAAU,CAC9B,IAAIC,EACAZ,EACAa,EACAC,EACAC,EACAC,EACAC,EAWJ,GATAjB,EAAO,CACN,MAAS,SACV,EACK,UAAU,OAAS,IACvBA,EAAK,MAAQW,EAAQ,OAASX,EAAK,OAEpCe,EAAIL,EAAE,OAGDK,IAAM,EACV,OAAOV,EAOR,GALKL,EAAK,QAAU,YAEnBU,EAAI,IAAIX,EAAcW,CAAE,GAGpBK,IAAM,EACV,OAAAD,EAAMJ,EAAG,CAAE,EAAE,SAAS,EACjBZ,EAAWY,EAAG,CAAE,CAAE,IACtBI,GAAO,MAEDjB,EAASK,EAA6B,kBAAmBY,CAAI,EAKrE,GAHAE,EAAID,EAAI,EAGHA,EAAI,IAAM,CAEd,IADAD,EAAM,GACAG,EAAI,EAAGA,EAAIF,EAAGE,IACnBH,GAAO,IAAOJ,EAAGO,CAAE,EAAE,SAAS,EACzBnB,EAAWY,EAAGO,CAAE,CAAE,IACtBH,GAAO,MAEHG,EAAID,IACRF,GAAO,OAGT,OAAKd,EAAK,QAAU,UACnBa,EAAON,EAEPM,EAAOP,EAEDT,EAASgB,EAAM,mBAAoBC,CAAI,CAC/C,CAWA,IATKd,EAAK,QAAU,UACnBY,EAAS,oBAETA,EAAS,GAEVA,GAAUF,EAAG,CAAE,EAAE,SAAS,EACrBZ,EAAWY,EAAG,CAAE,CAAE,IACtBE,GAAU,MAELK,EAAI,EAAGA,EAAIF,EAAGE,IACdjB,EAAK,QAAU,WACnBY,GAAU,2BACLK,EAAID,IACRJ,GAAU,uBAGXA,GAAU,WACLK,EAAID,IACRJ,GAAU,MAGZA,GAAUF,EAAGO,CAAE,EAAE,SAAS,EACrBnB,EAAWY,EAAGO,CAAE,CAAE,IACtBL,GAAU,MAIZ,IAAMK,EAAI,EAAGA,EAAK,GAAGF,EAAE,GAAI,EAAGE,IAC7BL,GAAU,IAEX,OAAKZ,EAAK,QAAU,YACnBY,GAAU,KAEXE,EAAMJ,EAAG,CAAE,EAAE,SAAS,EACjBZ,EAAWY,EAAG,CAAE,CAAE,IACtBI,GAAO,MAEHd,EAAK,QAAU,UACnBa,EAAOT,EAEPS,EAAOV,EAERW,EAAMjB,EAASgB,EAAM,kBAAmBC,CAAI,EAC5CA,EAAMjB,EAASiB,EAAK,aAAcF,CAAO,EAClCf,EAASiB,EAAK,aAAgBF,EAAO,OAASJ,EAAc,kCAAoC,EAAG,CAC3G,CAKAd,EAAO,QAAUe,ICvIjB,IAAIS,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "join", "readFile", "replace", "isInteger", "Float32Array", "opts", "dir", "SINGLE_COEFFICIENT_TEMPLATE", "EVALPOLY_TEMPLATE", "EVALPOLY_FLOAT32_TEMPLATE", "EMPTY_TEMPLATE", "LOOP_TEMPLATE", "LOOP_FLOAT32_TEMPLATE", "MAX_CHARS", "compile", "c", "options", "horner", "tmpl", "str", "n", "m", "i", "main"]
}
